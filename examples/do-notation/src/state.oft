(module main
  [main])

(import ministd/data/tree-set
  empty-set set-has? set-insert)
(import ministd/monad/state
  exec-state state-modify)

(defmacro curry (expr)
  ...)

(defmacro do (monad-desc ... args)
  nil)

(intrinsics:defn range (from to)
  (intrinsics:defn helper (x acc)
    (if (= x from)  
      (cons x acc)
      (helper (1- x) (cons x acc))))
  (helper (1- to) nil))

(intrinsics:defn main (args)
  (def set (exec-state empty-set
    (do [ministd/monad/state]
      (state-modify (curry (set-insert 2)))
      (state-modify (curry (set-insert 3)))
      (state-modify (curry (set-insert 5))))))
  (each
    \(println (cons (set-has? $ set) $))
    (range 1 10)))
