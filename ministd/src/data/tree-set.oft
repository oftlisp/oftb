(module ministd/data/tree-set
  [empty-set list->set set->list set-difference set-has? set-insert set-merge singleton-set])

(intrinsics:def black 'black)
(intrinsics:def red 'red)

(intrinsics:def E 'E)
(intrinsics:defn T (color l r x)
  (cons 'T (cons color (cons l (cons r x)))))

(intrinsics:defn E? (tree)
  (eq E tree))
(intrinsics:defn T? (tree)
  (if (cons? tree)
    (eq (car tree) 'T)))

(intrinsics:defn get-color (tree)
  (if (E? tree)
    black
    (nth 1 tree)))
(intrinsics:defn get-left (tree)
  (nth 2 tree))
(intrinsics:defn get-right (tree)
  (nth 3 tree))
(intrinsics:defn get-value (tree)
  (skip 4 tree))

(intrinsics:defn red?   (tree) (eq (get-color tree) red))
(intrinsics:defn black? (tree) (eq (get-color tree) black))

(intrinsics:defn check-invariants (tree)
  ; Returns false iff the tree is red and has a red child.
  (intrinsics:defn check-red-children (tree)
    (if (red? tree)
      (and (black? (get-left tree)) (black? (get-right tree)))
      true))

  ; Applies check-red-children to all subtrees.
  (intrinsics:defn check-all-red-children (tree)
    (if (and (check-red-children tree) (T? tree))
      (and
        (check-all-red-children (get-left  tree))
        (check-all-red-children (get-right tree)))
      false))

  ; Returns true iff the search tree property holds.
  (intrinsics:defn check-ordering (tree)
    (if (E? tree)
      true
      (progn
        (intrinsics:def l (get-left  tree))
        (intrinsics:def r (get-right tree))
        (intrinsics:def v (get-value tree))
        (and
          (if (T? l)
            (and (<= (get-value l) v) (check-ordering l))
            true)
          (if (T? (get-right tree))
            (and (>  (get-value r) v) (check-ordering r))
            true)))))

  ; Returns nil iff the path-lengths-to-black of the tree's children are
  ; different, and the path length if they are the same.
  (intrinsics:defn check-paths (tree)
    (if (E? tree)
      1
      (progn
        (intrinsics:def l (check-paths (get-left  tree)))
        (intrinsics:def r (check-paths (get-right tree)))
        (intrinsics:def f (if (red? tree) id 1+))
        (if (and l r)
          (if (= l r)
            (f l)
            false)
          false))))

  ; Run all the checks.
  (and
    (check-all-red-children tree)
    (and
      (check-ordering tree)
      (not (nil? (check-paths tree))))))

; TODO: This *really* needs a rewrite to use pattern-matching once that's
; implemented.
;
; Each of the case-* helper functions returns either nil or a list of the form
; (a b c d x y z).
(intrinsics:defn balance (tree)
  ; (T black (T red (T red a b | x) c | y) d | z)
  (intrinsics:defn case-1 (tree)
    (if (and (T? tree) (black? tree))
      (progn
        (intrinsics:def l (get-left tree))
        (if (red? l)
          (progn
            (intrinsics:def ll (get-left l))
            (if (red? ll)
              (list (get-left ll) (get-right ll) (get-right l) (get-right tree)
                (get-value ll) (get-value l) (get-value tree))
              nil))
          nil))
      nil))

  ; (T black (T red a (T red b c | y) | x) d | z)
  (intrinsics:defn case-2 (tree)
    (if (and (T? tree) (black? tree))
      (progn
        (intrinsics:def l (get-left tree))
        (if (red? l)
          (progn
            (intrinsics:def lr (get-right l))
            (if (red? lr)
              (list (get-left l) (get-left lr) (get-right lr) (get-right tree)
                (get-value l) (get-value lr) (get-value tree))
              nil))
          nil))
      nil))

  ; (T black a (T red (T red b c | y) d | z) | x)
  (intrinsics:defn case-3 (tree)
    (if (and (T? tree) (black? tree))
      (progn
        (intrinsics:def r (get-right tree))
        (if (red? r)
          (progn
            (intrinsics:def rl (get-left r))
            (if (red? rl)
              (list (get-left tree) (get-left rl) (get-right rl) (get-right r)
                (get-value tree) (get-value rl) (get-value r))
              nil))
          nil))
      nil))

  ; (T black a (T red b (T red c d | z) | y) | x)
  (intrinsics:defn case-4 (tree)
    (if (and (T? tree) (black? tree))
      (progn
        (intrinsics:def r (get-right tree))
        (if (red? r)
          (progn
            (intrinsics:def rr (get-right r))
            (if (red? rr)
              (list (get-left tree) (get-left r) (get-left rr) (get-right rr)
                (get-value tree) (get-value r) (get-value rr))
              nil))
          nil))
      nil))

  (intrinsics:def pat (first-nonnil (map \($ tree) (list case-1 case-2 case-3 case-4))))
  (if pat
    (progn
      (intrinsics:def a (nth 0 pat))
      (intrinsics:def b (nth 1 pat))
      (intrinsics:def c (nth 2 pat))
      (intrinsics:def d (nth 3 pat))
      (intrinsics:def x (nth 4 pat))
      (intrinsics:def y (nth 5 pat))
      (intrinsics:def z (nth 6 pat))
      (T red (T black a b x) (T black c d z) y))
    tree))

(intrinsics:def empty-set E)
(intrinsics:defn singleton-set (x)
  (T black E E x))

(intrinsics:defn list->set (lst)
  (foldl (flip set-insert) empty-set lst))

(intrinsics:defn set->list (tree)
  (if (T? tree)
    (append
      (set->list (get-left tree))
      (cons
        (get-value tree)
        (set->list (get-right tree))))
    nil))

; TODO: This could probably be more efficient.
(intrinsics:defn set-difference (l r)
  (list->set (filter \(not (set-has? $ r)) (set->list l))))

(intrinsics:defn set-has? (x tree)
  (if (E? tree)
    false
    (progn
      (intrinsics:def y (get-value tree))
      (if (< x y)
        (set-has? x (get-left  tree))
        (if (> x y)
          (set-has? x (get-right tree))
          true)))))

(intrinsics:defn set-insert (x tree)
  (intrinsics:defn ins (tree)
    (if (E? tree)
      (T red E E x)
      (progn
        (intrinsics:def c (get-color tree))
        (intrinsics:def l (get-left  tree))
        (intrinsics:def r (get-right tree))
        (intrinsics:def y (get-value tree))
        (if (< x y)
          (balance (T c (ins l) r y))
          (if (> x y)
            (balance (T c l (ins r) y))
            tree)))))
  (intrinsics:def tree (ins tree))
  (intrinsics:def l (get-left  tree))
  (intrinsics:def r (get-right tree))
  (intrinsics:def y (get-value tree))
  (T black l r y))

; TODO: This could probably be more efficient.
(intrinsics:defn set-merge (l r)
  (foldl (flip set-insert) l (set->list r)))
