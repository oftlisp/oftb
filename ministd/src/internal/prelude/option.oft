(module ministd/internal/prelude/option
  [expect none none? nullable->option option->nullable option-cases some some?]
  no-prelude)

(import ministd/internal/prelude/function
  id)
(import ministd/internal/prelude/intrinsics
  car cdr cons cons? eq false nil nil? panic true)

(def none 'none)

(intrinsics:defn nullable->option (x)
  (if (nil? x)
    none
    (some x)))

(intrinsics:defn option->nullable (opt)
  (option-cases id (fn () nil) opt))

(intrinsics:defn option-cases (s n opt)
  (if (some? opt)
    (s (cdr opt))
    (if (none? opt)
      (n)
      (panic "Not an option"))))

(intrinsics:defn some (x)
  (cons 'some x))

(intrinsics:defn some? (opt)
  (if (cons? opt)
    (eq (car opt) 'some)
    false))

(intrinsics:defn none? (opt)
  (eq opt 'none))

(intrinsics:defn expect (opt msg)
  (option-cases id (fn () (panic msg)) opt))
