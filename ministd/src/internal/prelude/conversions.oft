(module ministd/internal/prelude/conversions
  [list->vector string->symbol symbol->string vector->list]
  no-prelude)

(import ministd/internal/prelude/intrinsics
  [- = cons nil panic])
(import ministd/internal/prelude/vector
  [vector-length vector-nth])

(intrinsics:def list->vector   intrinsics/convert:list_to_vector)
(intrinsics:def string->symbol intrinsics/convert:string_to_symbol)
(intrinsics:def symbol->string intrinsics/convert:symbol_to_string)

(intrinsics:defn vector->list (v)
  (intrinsics:defn helper (n acc)
    (if (= n 0)
      (cons (vector-nth 0 v) acc)
      (helper (- n 1) (cons (vector-nth n v) acc))))
  (helper (- (vector-length v) 1) nil))
