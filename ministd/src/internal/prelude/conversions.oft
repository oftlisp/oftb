(module ministd/internal/prelude/conversions
  [byte->bytes byte->fixnum fixnum->byte list->vector string->bytes string->symbol symbol->string
   vector->list]
  no-prelude)

(import ministd/internal/prelude/intrinsics
  [cons nil panic])
(import ministd/internal/prelude/math
  [0? 1-])
(import ministd/internal/prelude/vector
  [vector-length vector-nth])

(intrinsics:def byte->bytes    intrinsics/convert:byte_to_bytes)
(intrinsics:def byte->fixnum   intrinsics/convert:byte_to_fixnum)
(intrinsics:def fixnum->byte   intrinsics/convert:fixnum_to_byte)
(intrinsics:def list->vector   intrinsics/convert:list_to_vector)
(intrinsics:def string->bytes  intrinsics/convert:string_to_bytes)
(intrinsics:def string->symbol intrinsics/convert:string_to_symbol)
(intrinsics:def symbol->string intrinsics/convert:symbol_to_string)

(intrinsics:defn vector->list (v)
  (intrinsics:defn helper (n acc)
    (if (0? n)
      (cons (vector-nth 0 v) acc)
      (helper (1- n) (cons (vector-nth n v) acc))))
  (helper (1- (vector-length v)) nil))
