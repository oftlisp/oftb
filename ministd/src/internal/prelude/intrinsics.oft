(module ministd/internal/prelude/intrinsics
  [* + - / = apply byte? bytes? car cdr compare cons cons? eq equals false fixnum? function? list
   mod nil nil? panic print println string? symbol? true vector? write write-bytes writeln]
  no-prelude)

; Constants
(def nil   '())
(def false nil)
(def true  'true)

; Basic Functions
(def =       intrinsics:eq_num)
(def apply   intrinsics:apply)
(def car     intrinsics:car)
(def cdr     intrinsics:cdr)
(def compare intrinsics:compare)
(def cons    intrinsics:cons)
(def eq      intrinsics:eq)
(def equals  intrinsics:equals)
(def list    intrinsics:list)
(def panic   intrinsics:panic)

; I/O Functions
(def print       intrinsics/io:print)
(def println     intrinsics/io:println)
(def write       intrinsics/io:write)
(def writeln     intrinsics/io:writeln)
(def write-bytes intrinsics/io:write_bytes)

; Math Functions
(def *   intrinsics/math:multiply)
(def +   intrinsics/math:add)
(def -   intrinsics/math:subtract)
(def /   intrinsics/math:divide)
(def mod intrinsics/math:modulo)

; Type-Test Functions
(def byte?     intrinsics/types:is_byte)
(def bytes?    intrinsics/types:is_bytes)
(def cons?     intrinsics/types:is_cons)
(def fixnum?   intrinsics/types:is_fixnum)
(def function? intrinsics/types:is_function)
(def nil?      intrinsics/types:is_nil)
(def string?   intrinsics/types:is_string)
(def symbol?   intrinsics/types:is_symbol)
(def vector?   intrinsics/types:is_vector)
