(module ministd/internal/prelude/list
  [append assoc each first-nonnil first-some flat-map foldl foldr length map
   nth partition reverse skip split-at take]
  no-prelude)

(import ministd/internal/prelude/either
  either)
(import ministd/internal/prelude/intrinsics
  + - = car cdr cons equals nil nil?)
(import ministd/internal/prelude/option
  none some some?)
(import ministd/internal/prelude/pair
  map-pair pair)

(intrinsics:defn append (l r)
  (intrinsics:defn helper (l r)
    (if (nil? l)
      r
      (helper (cdr l) (cons (car l) r))))
  (helper (reverse l) r))

(intrinsics:defn assoc (x l)
  (if (nil? l)
    none
    (if (equals (car (car l)) x)
      (some (cdr (car l)))
      (assoc x (cdr l)))))

(intrinsics:defn each (f l)
  (if (nil? l)
    nil
    (progn
      (f (car l))
      (each f (cdr l)))))

(intrinsics:defn first-nonnil (l)
  (if (nil? l)
    nil
    (if (nil? (car l))
      (first-nonnil (cdr l))
      (car l))))

(intrinsics:defn first-some (l)
  (if (nil? l)
    none
    (if (some? (car l))
      (car l)
      (first-some (cdr l)))))

(intrinsics:defn flat-map (f l)
  (intrinsics:defn helper (l acc)
    (if (nil? l)
      acc
      (helper (cdr l) (append (f (car l)) acc))))
  (helper l nil))

(intrinsics:defn foldl (f x l)
  (if (nil? l)
    x
    (foldl f (f x (car l)) (cdr l))))

(intrinsics:defn foldr (f x l)
  (if (nil? l)
    x
    (f (car l) (foldr f x (cdr l)))))

(intrinsics:defn length (l)
  (foldl (fn (l _) (+ l 1)) 0 l))

(intrinsics:defn map (f l)
  (reverse (foldl (fn (a x) (cons (f x) a)) '() l)))

(intrinsics:defn nth (n l)
  (car (skip n l)))

(intrinsics:defn partition (es)
  (intrinsics:defn helper (es ls rs)
    (if (nil? es)
      (pair ls rs)
      (either
        \(helper (cdr es) (cons $ ls) rs)
        \(helper (cdr es) ls (cons $ rs))
        (car es))))
  (map-pair reverse reverse (helper es nil nil)))

(intrinsics:defn reverse (l)
  (foldl (fn (a x) (cons x a)) '() l))

(intrinsics:defn skip (n l)
  (if (= n 0)
    l
    (skip (- n 1) (cdr l))))

(intrinsics:defn split-at (n l)
  (pair (take n l) (skip n l)))

(intrinsics:defn take (n l)
  (intrinsics:defn helper (n l acc)
    (if (= n 0)
      acc
      (helper (- n 1) (cdr l) (cons (car l) acc))))
  (reverse (helper n l nil)))
