(module ministd/prelude [* + - . / 0? 1+ 1- 1st 2nd 3rd 4th 5th 6th 7th 8th 9th < <= = > >= all all-some and any append apply as-shl assoc byte? bytes? car cdr compare cons cons? debug-trace each either eq equals err err? expect false filter find first-nonnil first-some fixnum? flat-map flip foldl foldr fst function? id index-into left left? length list list->vector map map-err map-fst map-ok map-pair map-result map-snd mod must nil nil? none none? not nth nullable->option ok ok? option->nullable option-cases or pair panic partition print println reverse right right? shl? skip skip-while snd some some? sort sort-by split-at string->symbol string-append string-concat string-join string-length string-nth string-replace string-search string-slice string-split-on string-split-on-1 string? symbol->string symbol? take take-while true vector->list vector-append vector-each vector-length vector-nth vector-slice vector? write write-bytes writeln] no-prelude)

(import ministd/internal/prelude/compare [< <= > >=])
(import ministd/internal/prelude/conversions [list->vector string->symbol symbol->string vector->list])
(import ministd/internal/prelude/either [either left left? right right?])
(import ministd/internal/prelude/function [. flip id])
(import ministd/internal/prelude/intrinsics [* + - / = apply byte? bytes? car cdr compare cons cons? eq equals false fixnum? function? list mod nil nil? panic print println string? symbol? true vector? write write-bytes writeln])
(import ministd/internal/prelude/list [1st 2nd 3rd 4th 5th 6th 7th 8th 9th all all-some any append assoc each filter find first-nonnil first-some flat-map foldl foldr index-into length map nth partition reverse skip skip-while split-at take take-while])
(import ministd/internal/prelude/logic [and not or])
(import ministd/internal/prelude/math [0? 1+ 1-])
(import ministd/internal/prelude/option [expect none none? nullable->option option->nullable option-cases some some?])
(import ministd/internal/prelude/pair [fst map-fst map-pair map-snd pair snd])
(import ministd/internal/prelude/result [err err? map-err map-ok map-result must ok ok?])
(import ministd/internal/prelude/sort [sort sort-by])
(import ministd/internal/prelude/string [string-append string-concat string-join string-length string-nth string-replace string-search string-slice string-split-on string-split-on-1])
(import ministd/internal/prelude/util [as-shl debug-trace shl?])
(import ministd/internal/prelude/vector [vector-append vector-each vector-length vector-nth vector-slice])

(def < <)
(def <= <=)
(def > >)
(def >= >=)
(def list->vector list->vector)
(def string->symbol string->symbol)
(def symbol->string symbol->string)
(def vector->list vector->list)
(def either either)
(def left left)
(def left? left?)
(def right right)
(def right? right?)
(def . .)
(def flip flip)
(def id id)
(def * *)
(def + +)
(def - -)
(def / /)
(def = =)
(def apply apply)
(def byte? byte?)
(def bytes? bytes?)
(def car car)
(def cdr cdr)
(def compare compare)
(def cons cons)
(def cons? cons?)
(def eq eq)
(def equals equals)
(def false false)
(def fixnum? fixnum?)
(def function? function?)
(def list list)
(def mod mod)
(def nil nil)
(def nil? nil?)
(def panic panic)
(def print print)
(def println println)
(def string? string?)
(def symbol? symbol?)
(def true true)
(def vector? vector?)
(def write write)
(def write-bytes write-bytes)
(def writeln writeln)
(def 1st 1st)
(def 2nd 2nd)
(def 3rd 3rd)
(def 4th 4th)
(def 5th 5th)
(def 6th 6th)
(def 7th 7th)
(def 8th 8th)
(def 9th 9th)
(def all all)
(def all-some all-some)
(def any any)
(def append append)
(def assoc assoc)
(def each each)
(def filter filter)
(def find find)
(def first-nonnil first-nonnil)
(def first-some first-some)
(def flat-map flat-map)
(def foldl foldl)
(def foldr foldr)
(def index-into index-into)
(def length length)
(def map map)
(def nth nth)
(def partition partition)
(def reverse reverse)
(def skip skip)
(def skip-while skip-while)
(def split-at split-at)
(def take take)
(def take-while take-while)
(def and and)
(def not not)
(def or or)
(def 0? 0?)
(def 1+ 1+)
(def 1- 1-)
(def expect expect)
(def none none)
(def none? none?)
(def nullable->option nullable->option)
(def option->nullable option->nullable)
(def option-cases option-cases)
(def some some)
(def some? some?)
(def fst fst)
(def map-fst map-fst)
(def map-pair map-pair)
(def map-snd map-snd)
(def pair pair)
(def snd snd)
(def err err)
(def err? err?)
(def map-err map-err)
(def map-ok map-ok)
(def map-result map-result)
(def must must)
(def ok ok)
(def ok? ok?)
(def sort sort)
(def sort-by sort-by)
(def string-append string-append)
(def string-concat string-concat)
(def string-join string-join)
(def string-length string-length)
(def string-nth string-nth)
(def string-replace string-replace)
(def string-search string-search)
(def string-slice string-slice)
(def string-split-on string-split-on)
(def string-split-on-1 string-split-on-1)
(def as-shl as-shl)
(def debug-trace debug-trace)
(def shl? shl?)
(def vector-append vector-append)
(def vector-each vector-each)
(def vector-length vector-length)
(def vector-nth vector-nth)
(def vector-slice vector-slice)
