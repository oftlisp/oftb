(module ministd/prelude [< <= > >= expect none none? some some? vector-append vector-each vector-length vector-nth vector-slice 0? 1+ 1- list<-vector string<-symbol symbol<-string string-append string-length string-nth string-slice and not or either left left? right right? fst map-fst map-pair map-snd pair snd debug-trace * + - / = byte? bytes? car cdr compare cons cons? eq equals false fixnum? function? list mod nil nil? panic print println string? symbol? true vector? write write-bytes writeln append assoc each first-nonnil first-some flat-map foldl foldr length map nth partition reverse skip split-at take . id sort sort-by] no-prelude)

(import ministd/internal/prelude/compare < <= > >=)
(import ministd/internal/prelude/option expect none none? some some?)
(import ministd/internal/prelude/vector vector-append vector-each vector-length vector-nth vector-slice)
(import ministd/internal/prelude/math 0? 1+ 1-)
(import ministd/internal/prelude/conversions list<-vector string<-symbol symbol<-string)
(import ministd/internal/prelude/string string-append string-length string-nth string-slice)
(import ministd/internal/prelude/logic and not or)
(import ministd/internal/prelude/either either left left? right right?)
(import ministd/internal/prelude/pair fst map-fst map-pair map-snd pair snd)
(import ministd/internal/prelude/util debug-trace)
(import ministd/internal/prelude/intrinsics * + - / = byte? bytes? car cdr compare cons cons? eq equals false fixnum? function? list mod nil nil? panic print println string? symbol? true vector? write write-bytes writeln)
(import ministd/internal/prelude/list append assoc each first-nonnil first-some flat-map foldl foldr length map nth partition reverse skip split-at take)
(import ministd/internal/prelude/function . id)
(import ministd/internal/prelude/sort sort sort-by)

(def < <)
(def <= <=)
(def > >)
(def >= >=)
(def expect expect)
(def none none)
(def none? none?)
(def some some)
(def some? some?)
(def vector-append vector-append)
(def vector-each vector-each)
(def vector-length vector-length)
(def vector-nth vector-nth)
(def vector-slice vector-slice)
(def 0? 0?)
(def 1+ 1+)
(def 1- 1-)
(def list<-vector list<-vector)
(def string<-symbol string<-symbol)
(def symbol<-string symbol<-string)
(def string-append string-append)
(def string-length string-length)
(def string-nth string-nth)
(def string-slice string-slice)
(def and and)
(def not not)
(def or or)
(def either either)
(def left left)
(def left? left?)
(def right right)
(def right? right?)
(def fst fst)
(def map-fst map-fst)
(def map-pair map-pair)
(def map-snd map-snd)
(def pair pair)
(def snd snd)
(def debug-trace debug-trace)
(def * *)
(def + +)
(def - -)
(def / /)
(def = =)
(def byte? byte?)
(def bytes? bytes?)
(def car car)
(def cdr cdr)
(def compare compare)
(def cons cons)
(def cons? cons?)
(def eq eq)
(def equals equals)
(def false false)
(def fixnum? fixnum?)
(def function? function?)
(def list list)
(def mod mod)
(def nil nil)
(def nil? nil?)
(def panic panic)
(def print print)
(def println println)
(def string? string?)
(def symbol? symbol?)
(def true true)
(def vector? vector?)
(def write write)
(def write-bytes write-bytes)
(def writeln writeln)
(def append append)
(def assoc assoc)
(def each each)
(def first-nonnil first-nonnil)
(def first-some first-some)
(def flat-map flat-map)
(def foldl foldl)
(def foldr foldr)
(def length length)
(def map map)
(def nth nth)
(def partition partition)
(def reverse reverse)
(def skip skip)
(def split-at split-at)
(def take take)
(def . .)
(def id id)
(def sort sort)
(def sort-by sort-by)
