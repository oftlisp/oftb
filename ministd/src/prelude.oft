(module ministd/prelude
  [* + - 1- = byte? bytes? car cdr cons cons? equals false fixnum? function?
   length list map nil nil? print println reverse string? symbol? true vector?]
  no-prelude)

(import ministd/internal/prelude/intrinsics
  * + - = byte? bytes? car cdr cons cons? equals false fixnum? function? list
  nil nil? print println string? symbol? true vector?)
(import ministd/internal/prelude/list
  foldl foldr length map reverse)

(def *         *)
(def +         +)
(def -         -)
(def =         =)
(def byte?     byte?)
(def bytes?    bytes?)
(def car       car)
(def cdr       cdr)
(def cons      cons)
(def cons?     cons?)
(def equals    equals)
(def false     false)
(def fixnum?   fixnum?)
(def function? function?)
(def list      list)
(def nil       nil)
(def nil?      nil?)
(def print     print)
(def println   println)
(def string?   string?)
(def symbol?   symbol?)
(def true      true)
(def vector?   vector?)

(def foldl   foldl)
(def foldr   foldr)
(def length  length)
(def map     map)
(def reverse reverse)

; TODO: Type support.
(defn 0? (x)
  (= x 0))

; TODO: Type support.
(defn 1+ (x)
  (+ x 1))

; TODO: Type support.
(defn 1- (x)
  (- x 1))
