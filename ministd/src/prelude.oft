(module ministd/prelude
  [* + - 0? 1+ 1- = and append assoc byte? bytes? car cdr cons cons? each
   either eq equals expect false fixnum? flat-map foldl foldr function? fst
   left left? length list list<-vector map map-fst map-pair map-snd nil nil?
   none none? not nth or pair panic partition print println reverse right
   right? skip some some? snd string? string-append string-length string-nth
   string-slice symbol? symbol<-string take true vector? vector-append write
   write-bytes writeln]
  no-prelude)

(import ministd/internal/prelude/intrinsics
  * + - = byte? bytes? car cdr cons cons? eq equals false fixnum? function?
  list nil nil? panic print println string? symbol? true vector? write
  write-bytes writeln)
(import ministd/internal/prelude/conversions
  list<-vector symbol<-string)
(import ministd/internal/prelude/either
  either left left? right right?)
(import ministd/internal/prelude/list
  append assoc each flat-map foldl foldr length map nth partition reverse skip
  take)
(import ministd/internal/prelude/logic
  and not or)
(import ministd/internal/prelude/math
  0? 1+ 1-)
(import ministd/internal/prelude/option
  expect none none? some some?)
(import ministd/internal/prelude/pair
  fst map-fst map-pair map-snd pair snd)
(import ministd/internal/prelude/string
  string-append string-length string-nth string-slice)
(import ministd/internal/prelude/vector
  vector-append)

(def *              *)
(def +              +)
(def -              -)
(def =              =)
(def byte?          byte?)
(def bytes?         bytes?)
(def car            car)
(def cdr            cdr)
(def cons           cons)
(def cons?          cons?)
(def eq             eq)
(def equals         equals)
(def false          false)
(def fixnum?        fixnum?)
(def function?      function?)
(def list           list)
(def nil            nil)
(def nil?           nil?)
(def panic          panic)
(def print          print)
(def println        println)
(def string?        string?)
(def symbol?        symbol?)
(def true           true)
(def vector?        vector?)
(def write          write)
(def write-bytes    write-bytes)
(def writeln        writeln)

(def list<-vector   list<-vector)
(def symbol<-string symbol<-string)

(def either either)
(def left   left)
(def left?  left?)
(def right  right)
(def right? right?)

(def append    append)
(def assoc     assoc)
(def each      each)
(def flat-map  flat-map)
(def foldl     foldl)
(def foldr     foldr)
(def length    length)
(def map       map)
(def nth       nth)
(def partition partition)
(def reverse   reverse)
(def skip      skip)
(def take      take)

(def and and)
(def not not)
(def or  or)

(def expect expect)
(def none   none)
(def none?  none?)
(def some   some)
(def some?  some?)

(def fst      fst)
(def map-fst  map-fst)
(def map-pair map-pair)
(def map-snd  map-snd)
(def pair     pair)
(def snd      snd)

(def string-append string-append)
(def string-length string-length)
(def string-nth    string-nth)
(def string-slice  string-slice)

(def vector-append vector-append)

(def 0? 0?)
(def 1+ 1+)
(def 1- 1-)
