(module ministd/prelude [* + - . / 0? 1+ 1- 1st 2nd 3rd 4th 5th 6th 7th 8th 9th < <= = > >= all all-some and any append as-shl assoc byte? bytes? car cdr compare cons cons? const debug-trace each either eq equals err err? expect false filter find first-nonnil first-some fix fixnum? flat-map flip foldl foldr fst function? gensym id index-into init last left left->option left? length list list->vector lookup map map-err map-fst map-ok map-pair map-result map-snd mod must nil nil? none none? not nth nullable->option ok ok? option->nullable option-cases option-map or or-else pair panic partition position position-of print println reverse right right->option right? shl? skip skip-while snd some some? sort sort-by split-at string->symbol string-append string-concat string-join string-length string-nth string-replace string-search string-slice string-split-on string-split-on-1 string? symbol->string symbol? take take-while true vector->list vector-append vector-each vector-length vector-nth vector-slice vector? write write-bytes writeln] no-prelude)

(import ministd/internal/prelude/compare [< <= > >=])
(import ministd/internal/prelude/conversions [list->vector string->symbol symbol->string vector->list])
(import ministd/internal/prelude/either [either left left? left->option right right? right->option])
(import ministd/internal/prelude/function [. const fix flip id])
(import ministd/internal/prelude/intrinsics [* + - / = byte? bytes? car cdr compare cons cons? eq equals false fixnum? function? gensym list mod nil nil? panic print println string? symbol? true vector? write write-bytes writeln])
(import ministd/internal/prelude/list [1st 2nd 3rd 4th 5th 6th 7th 8th 9th all all-some any append assoc each filter find first-nonnil first-some flat-map foldl foldr index-into init last length lookup map nth partition position position-of reverse skip skip-while split-at take take-while])
(import ministd/internal/prelude/logic [and not or])
(import ministd/internal/prelude/math [0? 1+ 1-])
(import ministd/internal/prelude/option [expect none none? nullable->option option->nullable option-cases option-map or-else some some?])
(import ministd/internal/prelude/pair [fst map-fst map-pair map-snd pair snd])
(import ministd/internal/prelude/result [err err? map-err map-ok map-result must ok ok?])
(import ministd/internal/prelude/sort [sort sort-by])
(import ministd/internal/prelude/string [string-append string-concat string-join string-length string-nth string-replace string-search string-slice string-split-on string-split-on-1])
(import ministd/internal/prelude/util [as-shl debug-trace shl?])
(import ministd/internal/prelude/vector [vector-append vector-each vector-length vector-nth vector-slice])

(intrinsics:def < <)
(intrinsics:def <= <=)
(intrinsics:def > >)
(intrinsics:def >= >=)
(intrinsics:def list->vector list->vector)
(intrinsics:def string->symbol string->symbol)
(intrinsics:def symbol->string symbol->string)
(intrinsics:def vector->list vector->list)
(intrinsics:def either either)
(intrinsics:def left left)
(intrinsics:def left->option left->option)
(intrinsics:def left? left?)
(intrinsics:def right right)
(intrinsics:def right->option right->option)
(intrinsics:def right? right?)
(intrinsics:def . .)
(intrinsics:def const const)
(intrinsics:def fix fix)
(intrinsics:def flip flip)
(intrinsics:def id id)
(intrinsics:def * *)
(intrinsics:def + +)
(intrinsics:def - -)
(intrinsics:def / /)
(intrinsics:def = =)
(intrinsics:def byte? byte?)
(intrinsics:def bytes? bytes?)
(intrinsics:def car car)
(intrinsics:def cdr cdr)
(intrinsics:def compare compare)
(intrinsics:def cons cons)
(intrinsics:def cons? cons?)
(intrinsics:def eq eq)
(intrinsics:def equals equals)
(intrinsics:def false false)
(intrinsics:def fixnum? fixnum?)
(intrinsics:def function? function?)
(intrinsics:def gensym gensym)
(intrinsics:def list list)
(intrinsics:def mod mod)
(intrinsics:def nil nil)
(intrinsics:def nil? nil?)
(intrinsics:def panic panic)
(intrinsics:def print print)
(intrinsics:def println println)
(intrinsics:def string? string?)
(intrinsics:def symbol? symbol?)
(intrinsics:def true true)
(intrinsics:def vector? vector?)
(intrinsics:def write write)
(intrinsics:def write-bytes write-bytes)
(intrinsics:def writeln writeln)
(intrinsics:def 1st 1st)
(intrinsics:def 2nd 2nd)
(intrinsics:def 3rd 3rd)
(intrinsics:def 4th 4th)
(intrinsics:def 5th 5th)
(intrinsics:def 6th 6th)
(intrinsics:def 7th 7th)
(intrinsics:def 8th 8th)
(intrinsics:def 9th 9th)
(intrinsics:def all all)
(intrinsics:def all-some all-some)
(intrinsics:def any any)
(intrinsics:def append append)
(intrinsics:def assoc assoc)
(intrinsics:def each each)
(intrinsics:def filter filter)
(intrinsics:def find find)
(intrinsics:def first-nonnil first-nonnil)
(intrinsics:def first-some first-some)
(intrinsics:def flat-map flat-map)
(intrinsics:def foldl foldl)
(intrinsics:def foldr foldr)
(intrinsics:def index-into index-into)
(intrinsics:def init init)
(intrinsics:def last last)
(intrinsics:def length length)
(intrinsics:def lookup lookup)
(intrinsics:def map map)
(intrinsics:def nth nth)
(intrinsics:def partition partition)
(intrinsics:def position position)
(intrinsics:def position-of position-of)
(intrinsics:def reverse reverse)
(intrinsics:def skip skip)
(intrinsics:def skip-while skip-while)
(intrinsics:def split-at split-at)
(intrinsics:def take take)
(intrinsics:def take-while take-while)
(intrinsics:def and and)
(intrinsics:def not not)
(intrinsics:def or or)
(intrinsics:def 0? 0?)
(intrinsics:def 1+ 1+)
(intrinsics:def 1- 1-)
(intrinsics:def expect expect)
(intrinsics:def none none)
(intrinsics:def none? none?)
(intrinsics:def nullable->option nullable->option)
(intrinsics:def option->nullable option->nullable)
(intrinsics:def option-cases option-cases)
(intrinsics:def option-map option-map)
(intrinsics:def or-else or-else)
(intrinsics:def some some)
(intrinsics:def some? some?)
(intrinsics:def fst fst)
(intrinsics:def map-fst map-fst)
(intrinsics:def map-pair map-pair)
(intrinsics:def map-snd map-snd)
(intrinsics:def pair pair)
(intrinsics:def snd snd)
(intrinsics:def err err)
(intrinsics:def err? err?)
(intrinsics:def map-err map-err)
(intrinsics:def map-ok map-ok)
(intrinsics:def map-result map-result)
(intrinsics:def must must)
(intrinsics:def ok ok)
(intrinsics:def ok? ok?)
(intrinsics:def sort sort)
(intrinsics:def sort-by sort-by)
(intrinsics:def string-append string-append)
(intrinsics:def string-concat string-concat)
(intrinsics:def string-join string-join)
(intrinsics:def string-length string-length)
(intrinsics:def string-nth string-nth)
(intrinsics:def string-replace string-replace)
(intrinsics:def string-search string-search)
(intrinsics:def string-slice string-slice)
(intrinsics:def string-split-on string-split-on)
(intrinsics:def string-split-on-1 string-split-on-1)
(intrinsics:def as-shl as-shl)
(intrinsics:def debug-trace debug-trace)
(intrinsics:def shl? shl?)
(intrinsics:def vector-append vector-append)
(intrinsics:def vector-each vector-each)
(intrinsics:def vector-length vector-length)
(intrinsics:def vector-nth vector-nth)
(intrinsics:def vector-slice vector-slice)
