(module main
  [main])

(import macro-expander/fs
  walk-dir-files)

(intrinsics:defn main (args)
  (if (not (= (length args) 1))
    (panic "usage: make-prelude ministd-dir"))
  (def prelude-srcs-path (string-append (nth 0 args) "/src/internal/prelude"))
  (def prelude-files (walk-dir-files prelude-srcs-path))
  (def exports (map
    (fn (m) (map-pair symbol<-string exports-of m))
    prelude-files))

  (println (module-stmt-for exports))
  (each print-import-for exports))

(intrinsics:defn exports-of (src)
  (car (cdr (cdr (car src)))))

(intrinsics:defn module-stmt-for (exports)
  (def all-exports (foldl vector-append [] (map snd exports)))
  (list 'module 'std/prelude all-exports 'no-prelude))

(intrinsics:defn print-import-for (m)
  (def import-stmt (cons 'import (map-snd list<-vector m)))
  (println import-stmt))
