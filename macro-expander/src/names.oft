(module macro-expander/names
  [global-name? local-name? split-module-name])

(intrinsics:defn global-name? (sym)
  ('option-cases (string-split-on-1 ":" sym)
    \(0)
    (intrinsics:fn () 0)))

(intrinsics:defn local-name? (sym)
  (not (global-name? sym)))

; Goes from a module name (as a string or symbol) to a pair
; (package name, module name).
(intrinsics:defn split-module-name (name)
  (intrinsics:def name (if (symbol? name) (symbol->string name) name))
  (string-split-on-1 "/" name))
