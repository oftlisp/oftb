(module macro-expander/packages/load
  [load-metadata-for load-package-from])

(import macro-expander/fs
  [walk-dir])
(import macro-expander/packages/type
  [package])
(import ministd/internal/oftb
  [read-file])

(intrinsics:defn load-metadata-for (path)
  (intrinsics:def metadata-path (string-append path "/package.oftd"))
  (read-file metadata-path))

(intrinsics:defn load-package-from (path)
  (intrinsics:def metadata (load-metadata-for path))

  (intrinsics:def name (car (expect (lookup 'name metadata)
    "Missing package name")))
  (intrinsics:def components (expect (lookup 'components metadata)
    "Missing package components list"))

  (intrinsics:def components (partition (map
    (intrinsics:fn (component)
      (intrinsics:def type (car component))
      (intrinsics:def component (cdr component))
      (if (eq type 'library)
        (left (load-lib-from path component))
        (if (eq type 'binary)
          (right (load-bin-from path component))
          (panic (string-append "Unknown type: " (symbol->string type))))))
    components)))

  (intrinsics:def libs (fst components))
  (intrinsics:def lib (if (nil? libs)
    nil
    (if (= (length libs) 1)
      (car libs)
      (panic "Only one library component is allowed"))))
  (package name path lib (snd components)))

(intrinsics:defn load-bin-from (pkg-path component)
  (intrinsics:def name (car (expect
    (lookup 'name component)
    "Binary component missing name")))
  (intrinsics:def path (car (expect
    (lookup 'path component)
    "Binary component missing path")))
  (intrinsics:def path (foldl string-append "" (list
    pkg-path
    "/"
    path)))
  (pair name (read-file path)))

(intrinsics:defn load-lib-from (pkg-path component)
  (map read-file (walk-dir (string-append pkg-path "/src"))))
