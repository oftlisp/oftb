(module macro-expander/modules
  [expand-modules find-decls module-name prelude-name])

(import macro-expander/expand
  [expand-decls])
(import macro-expander/interpreter/env
  [intrinsics])
(import macro-expander/util
  [global?])
(import ministd/data/tree-set
  [list->set set-has?])

(intrinsics:defn expand-modules (std-name mods-srcs)
  (intrinsics:def mods (expand-module (prelude-name std-name) mods-srcs std-name nil))
  (map \(pair (nth 0 $) (nth 1 $))
    (expand-module 'main mods-srcs std-name mods)))

; Expands all the declarations in a module, returning a list of expanded modules.
(intrinsics:defn expand-module (target-module mod-srcs std-name mods)
  ; The source of the target module.
  (intrinsics:def mod-src (expect
    (find \(equals (module-name $) target-module) mod-srcs)
    (string-append "Module not found: " (symbol->string target-module))))
  ; All import decls.
  (intrinsics:def mod-attrs (skip 3 (car mod-src)))
  (intrinsics:def imports (if (contains? 'no-prelude mod-attrs)
    (find-imports-no-prelude mod-src)
    (find-imports mod-src std-name mod-srcs)))
  ; A list of modules not yet in the mods assoc.
  (intrinsics:def missing-modules (filter
    \(none? (lookup $ mods))
    (map \(nth 1 $) imports)))
  (if (nil? missing-modules)
    ; If no modules are missing, build the environment and expand the declarations inside the
    ; module. Then, return the module list with this module added.
    (progn
      (intrinsics:def tmp (build-initial-env imports mods))
      (intrinsics:def env (fst tmp))
      (intrinsics:def macros (snd tmp))
      (intrinsics:def decls (find-decls mod-src))

      (intrinsics:def initial-env-length (length env))
      (intrinsics:def initial-macros-length (length macros))

      (intrinsics:def tmp (expand-decls target-module decls env macros))
      (intrinsics:def decls (nth 0 tmp))
      (intrinsics:def env (nth 1 tmp))
      (intrinsics:def macros (nth 2 tmp))

      (intrinsics:def m (list
        target-module
        (append imports decls)
        (take (- (length env) initial-env-length) env)
        ; TODO: This decision is questionable...
        ; (take (- (length macros) initial-macros-length) macros)))
        macros))
      (cons m mods))
    ; If there are missing modules, try expanding the first one, then try again with that one
    ; added.
    (progn
      (intrinsics:def new-mods (expand-module (car missing-modules) mod-srcs std-name mods))
      (expand-module target-module mod-srcs std-name new-mods))))

; Builds an initial environment from a list of import decls, a list of global-referring variables
; (e.g. foo/bar:baz), and an assoc of expanded module environments. Returns a pair
; (INTERP-ENV INTERP-MACROS).
(intrinsics:defn build-initial-env (imports mods)
  (intrinsics:defn find-global-funcs (mods)
    (intrinsics:defn helper (tmp)
      (intrinsics:def mod-name (nth 0 tmp))
      (intrinsics:def mod-env (nth 2 tmp))
      (filter \(global? (fst $)) mod-env))
    (flat-map helper mods))
  (intrinsics:defn helper (l acc)
    (if (nil? l)
      (map-pair \(append (reverse $) (find-global-funcs mods)) reverse acc)
      (progn
        (intrinsics:def values (fst acc))
        (intrinsics:def macros (snd acc))
        (intrinsics:def hd (car l))
        (intrinsics:def name (nth 0 hd))
        (intrinsics:def acc (pair
          (option-cases \(cons (pair name $) values) (const0 values) (nth 1 hd))
          (option-cases \(cons (pair name $) macros) (const0 macros) (nth 2 hd))))
        (helper (cdr l) acc))))
  (helper (flat-map \(process-import $ mods) imports) (pair (wrap-intrinsics intrinsics) nil)))

; Returns the name of a module.
(intrinsics:defn module-name (m)
  (index-into '(0 1) m))

; Returns the exports of a module as a vector.
(intrinsics:defn module-exports (m)
  (index-into '(0 2) m))

; Returns all the declarations from a module. (Really, just skips the module form and imports.)
(intrinsics:defn find-decls (m)
  (skip-while \(shl? 'import $) (cdr m)))

; Returns all the import forms from a module without injecting the prelude import.
(intrinsics:defn find-imports-no-prelude (m)
  (take-while \(shl? 'import $) (cdr m)))

; Returns all the import forms from a module, injecting the prelude import if needed.
(intrinsics:defn find-imports (m std-name mod-srcs)
  (intrinsics:def prelude (prelude-name std-name))
  (intrinsics:def prelude-exports (module-exports
    (expect
      (find \(eq (module-name $) prelude) mod-srcs)
      "Missing prelude? (Did the prelude try to import itself?)")))
  (cons
    (list 'import prelude prelude-exports)
    (take-while \(shl? 'import $) (cdr m))))

; Takes an import form and an assoc of already-expanded modules. Returns a list of triples, where
; the first value is the imported value name, the second value is an option possibly containing a
; value from interpreting the module, and the third value is an option possibly containing a
; function that runs the macro.
(intrinsics:defn process-import (imp mods)
  (intrinsics:def mod-name (nth 1 imp))
  (intrinsics:def plain-imports (vector->list (nth 2 imp)))
  (intrinsics:def attrs (skip 3 imp))

  (intrinsics:def m (assoc mod-name mods))

  (intrinsics:def no-import-decls (list->set (option->nullable
    (lookup 'no-import-decl attrs))))
  (intrinsics:def no-import-macros (list->set (option->nullable
    (lookup 'no-import-macro attrs))))

  (map
    \(progn
      (intrinsics:def f
        (if (set-has? $ no-import-decls)
          (if (set-has? $ no-import-macros)
            (panic (string-concat (list
              "Symbol "
              (symbol->string $)
              " was excluded from both decl and macro imports (from module "
              (symbol->string mod-name)
              ")")))
            process-import-macro)
          (if (set-has? $ no-import-macros)
            process-import-decl
            process-import-either)))
      (intrinsics:def triple (f mod-name $ mods))
      (if (and (none? (nth 1 triple)) (none? (nth 2 triple)))
        (panic (string-concat (list
          "Couldn't import "
          (symbol->string $)
          " from "
          (symbol->string mod-name))))
        triple))
    plain-imports))

(intrinsics:defn process-import-decl (mod-name name mods)
  (intrinsics:def value (lookup name (nth 1 (assoc mod-name mods))))
  (list name value none))

(intrinsics:defn process-import-either (mod-name name mods)
  (intrinsics:def value (lookup name (nth 1 (assoc mod-name mods))))
  (intrinsics:def macro (lookup name (nth 2 (assoc mod-name mods))))
  (list name value macro))

(intrinsics:defn process-import-macro (mod-name name mods)
  (intrinsics:def macro (lookup name (nth 2 (assoc mod-name mods))))
  (list name none macro))

(intrinsics:defn prelude-name (std-name)
  (string->symbol (string-append (symbol->string std-name) "/prelude")))

(intrinsics:defn wrap-intrinsics (intrinsics)
  (intrinsics:defn helper (tmp)
    (intrinsics:def f (fst tmp))
    (intrinsics:def arity (snd tmp))
    \(apply f $))
  (map \(map-snd helper $) intrinsics))
