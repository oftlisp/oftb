(module macro-expander/modules
  [expand-modules module-name])

(import macro-expander/expand
  [expand-decls])
(import ministd/data/tree-set
  [list->set set-has?])

; Expands all the declarations in a module, returning a list of expanded modules.
(intrinsics:defn expand-module (target-module mod-srcs mods)
  ; The source of the target module.
  (intrinsics:def mod-src (expect
    (find \(equals (module-name $) target-module) mod-srcs)
    (string-append "Module not found: " (symbol->string target-module))))
  ; All import decls.
  (intrinsics:def imports (find-imports mod-src))
  ; A list of modules not yet in the mods assoc.
  (intrinsics:def missing-modules (filter
    \(none? (lookup $ mods))
    (map
      \(nth 1 $)
      imports)))
  (if (nil? missing-modules)
    ; If no modules are missing, build the environment and expand the declarations inside the
    ; module. Then, return the environment, as created from only the declarations inside the module
    ; (i.e. not including imports).
    (progn
      (intrinsics:def tmp (build-initial-env imports mods))
      (intrinsics:def interp-env (fst tmp))
      (intrinsics:def interp-macros (snd tmp))
      (intrinsics:def decls (find-decls mod-src))

      (intrinsics:def tmp (expand-decls decls interp-env interp-macros))
      (panic (cons 'todo tmp)))
    ; If there are missing modules, try expanding the first one, then try again with that one
    ; added.
    (progn
      (intrinsics:def new-mods (expand-module (car missing-modules) mod-srcs mods))
      (expand-module target-module mod-srcs new-mods))))

; Builds an initial environment from a list of import decls and an assoc of expanded module
; environments. Returns a pair (INTERP-ENV INTERP-MACROS).
(intrinsics:defn build-initial-env (imports mods)
  (intrinsics:def tmp (map \(process-import $ mods) imports))
  (if (nil? tmp)
    (pair nil nil)
    (panic (list 'todo (list 'build-initial-env imports 'mods)))))

; Returns the name of a module.
(intrinsics:defn module-name (m)
  (index-into '(0 1) m))

; Returns all the declarations from a module. (Really, just skips the module form and imports.)
(intrinsics:defn find-decls (m)
  (skip-while \(shl? 'import $) (cdr m)))

; Returns all the import forms from a module.
(intrinsics:defn find-imports (m)
  (take-while \(shl? 'import $) (cdr m)))

; Takes an import form and an assoc of already-expanded modules. Returns a list of pairs, where the
; fst is the imported value name and the snd is an either.  The left of the either is a value from
; interpreting the module. The right of the either is a function that runs the macro.
(intrinsics:defn process-import (imp mods)
  (intrinsics:def mod-name (nth 1 imp))
  (intrinsics:def plain-imports (vector->list (nth 2 imp)))
  (intrinsics:def attrs (skip 3 imp))

  (intrinsics:def m (assoc mod-name mods))

  (intrinsics:def no-import-decls (list->set (option->nullable
    (lookup 'no-import-decl attrs))))
  (intrinsics:def no-import-macros (list->set (option->nullable
    (lookup 'no-import-macro attrs))))

  (map
    \(progn
      (intrinsics:def f
        (if (set-has? $ no-import-decls)
          (if (set-has? $ no-import-macros)
            (panic (string-concat (list
              "Symbol "
              (symbol->string $)
              " was excluded from both decl and macro imports (from module "
              (symbol->string mod-name)
              ")")))
            process-import-macro)
          (if (set-has? $ no-import-macros)
            process-import-decl
            process-import-either)))
      (expect (f mod-name $ mods)
        (string-concat
          "Couldn't import "
          (symbol->string $)
          " from "
          (symbol->string mod-name))))
    plain-imports))

(intrinsics:defn process-import-decl (m name mods)
  (panic '(todo | process-import-decl)))

(intrinsics:defn process-import-either (m name mods)
  (intrinsics:def decl (process-import-decl m name mods))
  (intrinsics:def macro (process-import-macro m name mods))
  (panic '(todo | process-import-either)))

(intrinsics:defn process-import-macro (m name mods)
  (panic '(todo | process-import-macro)))

(intrinsics:defn expand-modules (mods-srcs)
  (expand-module 'main mods-srcs nil))
