(module macro-expander/interpreter
  [eval evaluate make-letrec-env])

(import macro-expander/interpreter/env
  [intrinsics])

(intrinsics:defn eval (expr env)
  (if (cons? expr)
    (progn
      (intrinsics:def evald (map \(eval $ env) expr))
      ((car evald) (cdr evald)))
    (if (vector? expr)
      (panic "TODO Vectors")
      (if (symbol? expr)
        (expect (lookup expr env)
          (string-append "Unbound variable: " (symbol->string expr)))
        (if (nil? expr)
          (panic "Nil is not an expression")
          expr)))))

(intrinsics:defn evaluate (expr)
  (eval expr intrinsics))

(intrinsics:defn make-lambda (params body get-env)
  (intrinsics:fn (args)
    (eval body (append (match-arguments params args) (get-env)))))

(intrinsics:defn make-letrec-env (defns env)
  (intrinsics:defn helper (f)
    (cons (nth 1 f) (make-lambda (nth 2 f) (skip 3 f) get-env)))
  (intrinsics:defn get-env ()
    (append (map helper defns) env))
  (get-env))

(intrinsics:defn match-arguments (params args)
  (panic '(todo | match-arguments)))
