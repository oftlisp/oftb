(module macro-expander/interpreter
  [eval evaluate])

(import macro-expander/interpreter/env
  [intrinsics])

(intrinsics:defn eval (expr env)
  (if (cons? expr)
    (progn
      (def func (evaluate (car expr) env))
      (def args (map
        \(evaluate $ env)
        (cdr expr)))
      ('apply func args))
    (if (vector? expr)
      (panic "TODO Vectors")
      (if (symbol? expr)
        (expect (assoc expr env)
          (string-append "Unbound variable: " (symbol->string expr)))
        (if (nil? expr)
          (panic "Nil is not an expression")
          expr)))))

(intrinsics:defn evaluate (expr)
  (eval expr intrinsics))
