(module macro-expander/interpreter
  [eval evaluate make-letrec-env])

(import macro-expander/interpreter/env
  [intrinsics])
(import macro-expander/util
  [global-name])

(intrinsics:defn eval (expr env)
  (if (cons? expr)
    (if (shl? 'intrinsics:def expr)
      (progn
        (eval (nth 2 expr) env)
        nil)
      (if (shl? 'intrinsics:defn expr)
        nil
        (if (shl? 'intrinsics:get-method expr)
          (progn
            (intrinsics:def type (eval (nth 1 expr) env))
            (intrinsics:def name (nth 2 expr))
            (intrinsics:def method-name (string->symbol (string-append (symbol->string type)
              (string-append "#" (symbol->string name)))))
            (expect (lookup method-name env)
              (string-append "Unbound method: " (symbol->string method-name))))
          (if (shl? 'if expr)
            (if (eval (nth 1 expr) env)
              (eval (nth 2 expr) env)
              (eval (nth 3 expr) env))
            (if (shl? 'intrinsics:fn expr)
              (make-lambda (nth 1 expr) (cons 'progn (skip 2 expr))
                (intrinsics:fn () env))
              (if (shl? 'intrinsics:named-fn expr)
                (make-lambda (nth 2 expr) (skip 3 expr) (intrinsics:fn () env))
                (if (shl? 'quote expr)
                  (nth 1 expr)
                  (if (shl? 'progn expr)
                    (eval-progn (cdr expr) env)
                    (progn
                      (intrinsics:def evald (map \(eval $ env) expr))
                      ((car evald) (cdr evald)))))))))))
    (if (vector? expr)
      (vector-map \(eval $ env) expr)
      (if (symbol? expr)
        (expect (lookup expr env)
          (string-append "Unbound variable: " (symbol->string expr)))
        (if (nil? expr)
          (panic "Nil is not an expression")
          expr)))))

(intrinsics:defn evaluate (expr)
  (eval expr intrinsics))

(intrinsics:defn decl? (decl)
  (or (shl? 'intrinsics:def decl) (shl? 'intrinsics:defn decl)))

(intrinsics:defn eval-progn (exprs env)
  (if (nil? exprs)
    (panic 'empty-progn)
    (progn
      (intrinsics:def defns (take-while \(shl? 'intrinsics:defn $) exprs))
      (intrinsics:def exprs (skip-while \(shl? 'intrinsics:defn $) exprs))
      (if (nil? exprs)
        nil
        (progn
          (intrinsics:def expr (car exprs))
          (intrinsics:def env (make-letrec-env defns nil env))
          (if (nil? (cdr exprs))
            (eval expr env)
            (progn
              (intrinsics:def env
                (if (shl? 'intrinsics:def expr)
                  (cons (pair (nth 1 expr) (eval (nth 2 expr) env)) env)
                  (progn (eval expr env) env)))
              (eval-progn (cdr exprs) env))))))))

(intrinsics:defn make-lambda (params body get-env)
  (intrinsics:fn (args)
    (eval body (append (match-arguments params args) (get-env)))))

(intrinsics:defn make-letrec-env (defns module-name env)
  (intrinsics:defn get-env ()
    (intrinsics:def these-defns
      (if module-name
        (append
          (map (. rename make-defn) defns)
          (map make-defn defns))
        (map make-defn defns)))
    (append these-defns env))
  (intrinsics:defn make-defn (f)
    (if (shl? 'intrinsics:defn f)
      (cons (nth 1 f) (make-lambda (nth 2 f) (cons 'progn (skip 3 f)) get-env))
      (panic (cons 'not-a-defn f))))
  (intrinsics:defn rename (item)
    (map-fst \(global-name module-name $) item))
  (get-env))

(intrinsics:defn match-arguments (params args)
  (intrinsics:defn helper (params args env)
    (if (nil? params)
      env
      (helper (cdr params) (cdr args)
        (cons (pair (car params) (car args)) env))))
  (if (= (length params) (length args))
    (helper params args nil)
    (panic (list 'bad-argn params args))))
