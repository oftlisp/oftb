(module macro-expander/compiler/flat-anf
  [anf-modules->flat-anf collect-globals])

(import macro-expander/modules
  [namespaced-name])
(import ministd/data/tree-set
  [empty-set set->list set-merge singleton-set])

(intrinsics:defn anf-modules->flat-anf (modules)
  (flat-map flatten-module modules))

(intrinsics:defn flatten-decl (mod-name decl scope)
  (if (shl? 'intrinsics:def decl)
    (pair (nth 1 decl) (flatten-expr (nth 2 decl) scope))
    (if (shl? 'intrinsics:defn decl)
      (progn
        (intrinsics:def name (namespaced-name mod-name (nth 1 decl)))
        (pair
          name
          (list 'fn
            (some name)
            (length (nth 2 decl))
            (flatten-expr (skip 3 decl) (with-vars (nth 2 decl) scope)))))
      (panic (cons 'invalid-decl decl)))))

(intrinsics:defn flatten-expr (expr scope)
  (if (shl? 'fn expr)
    (list 'fn
      (nth 1 expr)
      (length (nth 2 expr))
      (flatten-expr (nth 3 expr) (with-vars (nth 2 expr) scope)))
    (if (shl? 'lit expr)
      expr
      (if (shl? 'var expr)
        (progn
          (intrinsics:def var (nth 1 expr))
          (if (global? var)
            (cons 'global var)
            (expect
              (or-else
                (intrinsics:fn () (option-map \(cons 'local $) (position-of var (fst scope))))
                (option-map \(cons 'global $) (lookup var (snd scope))))
              (string-append "variable not found: " (symbol->string (nth 1 expr))))))
        (if (shl? 'vector expr)
          (cons 'vector (map \(flatten-expr $ scope) (cdr expr)))
          (if (shl? 'call expr)
            (cons 'call (map \(flatten-expr $ scope) (cdr expr)))
            (if (shl? 'if expr)
              (cons 'if (map \(flatten-expr $ scope) (cdr expr)))
              (if (shl? 'letrec expr)
                (progn
                  (intrinsics:def scope (with-vars (map fst (nth 1 expr)) scope))
                  (list 'letrec
                    (map
                      (intrinsics:fn (func)
                        (list
                          (nth 0 func)
                          (length (nth 1 func))
                          (flatten-expr (nth 2 func) (with-vars (nth 1 func) scope))))
                      (nth 1 expr))
                    (flatten-expr (nth 2 expr) scope)))
                (if (shl? 'let expr)
                  (list 'let (flatten-expr (nth 2 expr) scope)
                    (flatten-expr (nth 3 expr) (map-fst \(cons (nth 1 expr) $) scope)))
                  (if (shl? 'seq expr)
                    (list 'seq (flatten-expr (nth 1 expr) scope) (flatten-expr (nth 2 expr) scope))
                    (panic (cons 'invalid-anf-expr expr))))))))))))

(intrinsics:defn flatten-module (m)
  (intrinsics:def mod-name (fst m))
  (intrinsics:def imports (fst (snd m)))
  (intrinsics:def decls (snd (snd m)))
  (intrinsics:def scope (pair nil (append
    (map
      (intrinsics:fn (decl)
        (intrinsics:def name (nth 1 decl))
        (pair name (namespaced-name mod-name name)))
      decls)
    imports)))
  (map \(flatten-decl mod-name $ scope) decls))

(intrinsics:defn collect-globals (decls)
  (intrinsics:defn helper (expr)
    (if (shl? 'let expr)
      (set-merge (helper (nth 1 expr)) (helper (nth 2 expr)))
      (if (shl? 'seq expr)
        (set-merge (helper (nth 1 expr)) (helper (nth 2 expr)))
        (if (shl? 'call expr)
          (foldl set-merge empty-set (map helper (cdr expr)))
          (if (shl? 'if expr)
            (foldl set-merge empty-set (map helper (cdr expr)))
            (if (shl? 'letrec expr)
              (foldl set-merge (helper (nth 2 expr)) (map \(helper (nth 2 $)) (nth 1 expr)))
              (if (shl? 'global expr)
                (singleton-set (cdr expr))
                (if (shl? 'fn expr)
                  (helper (nth 3 expr))
                  (if (shl? 'lit expr)
                    empty-set
                    (if (shl? 'local expr)
                      empty-set
                      (if (shl? 'vector expr)
                        (foldl set-merge empty-set (map helper (cdr expr)))
                        (panic (cons 'invalid-anf-expr expr)))))))))))))
  (foldl set-merge empty-set (map (. helper cdr) decls)))

(intrinsics:defn global? (sym)
  (some? (string-search ":" (symbol->string sym))))

(intrinsics:defn with-var (var scope)
  (map-fst \(cons var $) scope))

(intrinsics:defn with-vars (vars scope)
  (if (nil? vars)
    scope
    (with-vars (cdr vars) (with-var (car vars) scope))))
