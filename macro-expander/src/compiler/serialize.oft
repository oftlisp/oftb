(module macro-expander/compiler/serialize
  [serialize-flatanf])

(import macro-expander/compiler/flat-anf
  [collect-globals])
(import ministd/data/tree-set
  [list->set set->list set-difference])

(intrinsics:defn serialize-flatanf (decls)
  (intrinsics:def globals
    (set-difference
      (collect-globals decls)
      (list->set (map fst decls))))
  (bytes-append
    b"ofta"
    (bytes-append
      (serialize-list (. serialize-string symbol->string) (set->list globals))
      (serialize-list serialize-decl decls))))

(intrinsics:defn serialize-decl (decl)
  (bytes-append
    (serialize-string (symbol->string (fst decl)))
    (serialize-expr (snd decl))))

(intrinsics:defn serialize-expr (expr)
  (if (shl? 'let expr)
    (bytes-append
      (bytes-append
        b"\x00"
        (serialize-expr (nth 1 expr)))
      (serialize-expr (nth 2 expr)))
    (if (shl? 'seq expr)
      (bytes-append
        (bytes-append
          b"\x01"
          (serialize-expr (nth 1 expr)))
        (serialize-expr (nth 2 expr)))
      (if (shl? 'call expr)
        (bytes-append
          (bytes-append
            b"\x02"
            (serialize-expr (nth 1 expr)))
          (bytes-append
            (serialize-u64 (- (length expr) 2))
            (bytes-concat (map serialize-expr (skip 2 expr)))))
        (if (shl? 'if expr)
          (bytes-append
            (bytes-append
              b"\x03"
              (serialize-expr (nth 1 expr)))
            (bytes-append
              (serialize-expr (nth 2 expr))
              (serialize-expr (nth 3 expr))))
          (if (shl? 'letrec expr)
            (bytes-append
              (bytes-append
                b"\x04"
                (serialize-list
                  \(bytes-append
                    (serialize-string (symbol->string (nth 0 $)))
                    (bytes-append
                      (serialize-u64 (nth 1 $))
                      (serialize-expr (nth 2 $))))
                  (nth 1 expr)))
                (serialize-expr (nth 2 expr)))
            (if (shl? 'global expr)
              (bytes-append
                b"\x05"
                (serialize-string (symbol->string (cdr expr))))
              (if (shl? 'fn expr)
                (bytes-append
                  (bytes-append
                    b"\x06"
                    (serialize-string (option-cases
                      symbol->string
                      (intrinsics:fn () "")
                      (nth 1 expr))))
                  (bytes-append
                    (serialize-u64 (nth 2 expr))
                    (serialize-expr (nth 3 expr))))
                (if (shl? 'lit expr)
                  (bytes-append
                    b"\x07"
                    (serialize-lit (nth 1 expr)))
                  (if (shl? 'local expr)
                    (bytes-append
                      b"\x08"
                      (serialize-u64 (cdr expr)))
                    (if (shl? 'vector expr)
                      (bytes-append
                        b"\x09"
                        (serialize-list serialize-expr (cdr expr)))
                      (if (shl? 'get-method expr)
                        (bytes-append
                          (bytes-append
                            b"\x0a"
                            (serialize-expr (nth 1 expr)))
                          (serialize-string (symbol->string (nth 2 expr))))
                        (panic (cons 'invalid-expr expr))))))))))))))

(intrinsics:defn serialize-list (f l)
  (bytes-append
    (serialize-u64 (length l))
    (bytes-concat (map f l))))

(intrinsics:defn serialize-lit (l)
  (if (byte? l)
    (bytes-append b"\x00" (byte->bytes l))
    (if (bytes? l)
      (bytes-append
        b"\x01"
        (bytes-append
          (serialize-u64 (bytes-length l))
          l))
      (if (cons? l)
        (bytes-append
          b"\x02"
          (bytes-append
            (serialize-lit (car l))
            (serialize-lit (cdr l))))
        (if (fixnum? l)
          (bytes-append b"\x03" (serialize-u64 l))
          (if (nil? l)
            b"\x04"
            (if (string? l)
              (bytes-append b"\x05" (serialize-string l))
              (if (symbol? l)
                (bytes-append b"\x06" (serialize-string (symbol->string l)))
                (if (vector? l)
                  (bytes-append
                    (bytes-append
                      b"\x07"
                      (serialize-u64 (vector-length l)))
                    (bytes-concat (map \(serialize-lit $) (vector->list l))))
                  (panic (cons 'invalid-lit l)))))))))))

(intrinsics:defn serialize-string (s)
  (intrinsics:def bs (string->bytes s))
  (bytes-append (serialize-u64 (bytes-length bs)) bs))

(intrinsics:defn serialize-u64 (n)
  (bytes-concat (map \(byte->bytes (fixnum->byte (fixnum-shr n $))) '(0 8 16 24 32 40 48 56))))
