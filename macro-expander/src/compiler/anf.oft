(module macro-expander/compiler/anf
  [module->anf])

(intrinsics:defn aexpr? (expr)
  (or (shl? 'fn expr)
  (or (shl? 'lit expr)
  (or (shl? 'var expr)
      (shl? 'vector expr)))))

(intrinsics:defn anf->aexpr (expr kont)
  (if (aexpr? expr)
    (kont expr)
    (progn
      (intrinsics:def name (gensym))
      (list 'let name expr (kont name)))))

(intrinsics:defn anfs->aexprs (exprs kont)
  (intrinsics:defn helper (exprs aexprs)
    (if (nil? exprs)
      (kont (reverse aexprs))
      (anf->aexpr (car exprs)
        (intrinsics:fn (aexpr)
          (helper (cdr exprs) (cons aexpr aexprs))))))
  (helper exprs nil))

(intrinsics:defn call->anf (func args)
  (anf->aexpr (expr->anf func) (intrinsics:fn (func)
    (anfs->aexprs (map expr->anf args) (intrinsics:fn (args)
      (cons 'call (cons func args)))))))

(intrinsics:defn decl->anf (decl)
  (if (shl? 'intrinsics:def decl)
    (append (take 2 decl) (list (expr->anf (nth 2 decl))))
    (if (shl? 'intrinsics:defn decl)
      (append (take 3 decl) (progn->anf (skip 3 decl)))
      (panic (cons 'unknown-decl decl)))))

(intrinsics:defn expr->anf (expr)
  (if (shl? 'intrinsics:def expr)
    (list 'seq
      (nth 2 expr)
      (list 'lit nil))
    (if (shl? 'intrinsics:defn expr)
      (list 'lit nil)
      (if (shl? 'if expr)
        (panic '(todo | if))
        (if (shl? 'intrinsics:fn expr)
          (panic '(todo | fn))
          (if (shl? 'quote expr)
            (list 'lit (nth 1 expr))
            (if (shl? 'progn expr)
              (progn->anf (cdr expr))
              (if (vector? expr)
                (anfs->aexprs (vector->list expr)
                  (intrinsics:fn (es) (cons 'vector es)))
                (if (symbol? expr)
                  (list 'var expr)
                  (if (cons? expr)
                    (call->anf (car expr) (cdr expr))
                    (if (or (function? expr) (nil? expr))
                      (panic (cons 'invalid-expr expr))
                      (list 'lit expr))))))))))))

(intrinsics:defn module->anf (m)
  (intrinsics:def imports (take-while \(shl? 'import $) m))
  (intrinsics:def decls (skip-while \(shl? 'import $) m))
  (pair (flat-map flatten-import imports) (map decl->anf decls)))

(intrinsics:defn progn->anf (exprs)
  (intrinsics:defn helper (exprs anf-expr defns)
    (list exprs anf-expr defns)
    (if (nil? exprs)
      (save-letrec anf-expr defns)
      (progn
        (intrinsics:def expr (car exprs))
        (if (shl? 'intrinsics:defn expr)
          (helper (cdr exprs) anf-expr (cons expr defns))
          (helper (cdr exprs) (save-letrec (expr->anf expr) defns) nil)))))
  (intrinsics:defn save-letrec (anf-expr defns)
    (if (nil? defns)
      anf-expr
      (panic save-letrec)))

  (intrinsics:def exprs (reverse exprs))
  (if (nil? exprs)
    (panic 'empty-progn)
    (helper (cdr exprs) (expr->anf (car exprs)) nil)))

(intrinsics:defn flatten-import (i)
  (panic ['todo flatten-import i]))
