(module macro-expander/packages
  [load-packages traverse-modules])

(import macro-expander/modules
  [module-name])
(import macro-expander/packages/load
  [load-package-from])
(import macro-expander/packages/type
  [binary-component library-component package])
(import ministd/data/tree-set
  [empty-set set-has?])

(intrinsics:defn load-packages (std-path root-package-path binary-name)
  (intrinsics:def std (load-package-from std-path))
  ; TODO: Dependencies. I guess this is getting tossed out once it bootstraps oftc, so it doesn't
  ; _really_ matter, but /shrug.
  (intrinsics:def root (load-package-from root-package-path))

  (pair
    (fst std)
    (append
      (binary-component root binary-name)
      (append
        (library-component root)
        (library-component std)))))

; Performs a post-order traversal over the modules, returning a result with the modules in order if
; the modules are acyclic, or the module involved in the cycle if they are not.
(intrinsics:defn traverse-modules (mods starting-module)
  ; Traverses to the given module. Returns an ok value of the pair (seen-set, resolved-list) on
  ; success, and a symbol (the module involved in the cycle) on error.
  (intrinsics:defn helper (goal seen-set resolved-list)
    (intrinsics:defn goal? (m)
      (eq (module-name m) goal))
    (if (set-has? goal seen-set)
      (if (any goal? resolved-list)
        (ok (pair seen-set resolved-list))
        (err goal))
      (progn
        (intrinsics:def m (expect
          (find goal? mods)
          (string-append "No such module: " (symbol->string goal))))
        (intrinsics:def deps (map \(nth 1 $) (take-while \(shl? 'import $) (cdr m))))
        (map-ok
          \(map-snd \(cons m $) $)
          (helper* deps seen-set resolved-list)))))
  (intrinsics:defn helper* (goals seen-set resolved-list)
    (if (nil? goals)
      (ok (pair seen-set resolved-list))
      (progn
        (intrinsics:def tmp (helper (car goals) seen-set resolved-list))
        (if (ok? tmp)
          (progn
            (intrinsics:def tmp (cdr tmp))
            (intrinsics:def seen-set (fst tmp))
            (intrinsics:def resolved-list (snd tmp))
            (helper* (cdr goals) seen-set resolved-list))
          tmp))))

  (map-ok snd (helper starting-module empty-set nil)))
