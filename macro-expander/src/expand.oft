(module macro-expander/expand
  [expand-decls])

(import macro-expander/interpreter
  [eval make-letrec-env])
(import macro-expander/util
  [global-name])

; Returns whether the value is directly macro-expandable with any of the given macros.
(intrinsics:defn expandable? (value macros)
  (intrinsics:def s (as-shl value))
  (if s
    (some? (lookup s macros))
    false))

; Macro-expands an arbitrary value, returning the expanded value. Will panic if a defmacro is
; encountered.
(intrinsics:defn expand-value (value env macros top-level)
  (intrinsics:defn multiple-helper (value)
    (intrinsics:def value (expand-value value env macros false))
    (if (shl? 'macro-multiple value)
      (cdr value)
      (list value)))
  (if (and (not top-level) (shl? 'intrinsics:defmacro value))
    (panic "defmacros must appear at the top level of a module")
    (if (shl? 'progn value)
      %(cons 'progn (flat-map multiple-helper (cdr %value)))
      (if (shl? 'quote value)
        value
        (if (expandable? value macros)
          (expand-value ((assoc (car value) macros) (cdr value)) env macros top-level)
          (if (cons? value)
            (map \(expand-value $ env macros false) value)
            (if (vector? value)
              (list->vector (map \(expand-value $ env macros false) (vector->list value)))
              value)))))))

; Converts a defmethod to a defn.
(intrinsics:defn defmethod->defn (form)
  (intrinsics:def name (string->symbol (string-append
    (symbol->string (car (cdr form)))
    (string-append
      "#"
      (symbol->string (car (cdr (cdr form))))))))
  (cons 'intrinsics:defn (cons name (cdr (cdr (cdr form))))))

; Expands the decls at the top level of a module, evaluating defmacros and decls. Returns a list
; (EXPANDED-DECLS ENV MACROS).
(intrinsics:defn expand-decls (module-name decls env macros)
  ; This loop lets us accumulate defns.
  (intrinsics:defn loop (decls acc-expanded acc-defns env macros)
    (if (nil? decls)
      (list (reverse acc-expanded) (make-letrec-env acc-defns module-name env) macros)
      (progn
        (intrinsics:def value (car decls))
        (intrinsics:def decls (cdr decls))
        (progn
          (intrinsics:def expanded (expand-value value env macros true))
          (if (shl? 'intrinsics:defmacro expanded)
            (progn
              (intrinsics:def env (make-letrec-env acc-defns module-name env))
              (loop decls acc-expanded nil env (cons (make-macro expanded env) macros)))
            (if (shl? 'intrinsics:defmethod expanded)
              (progn
                (intrinsics:def defnish (defmethod->defn expanded))
                (loop decls (cons defnish acc-expanded) (cons defnish acc-defns) env macros))
              (if (shl? 'intrinsics:defn expanded)
              (loop decls (cons expanded acc-expanded) (cons expanded acc-defns) env macros)
                (if (shl? 'intrinsics:def expanded)
                  (loop decls (cons expanded acc-expanded) nil
                    (progn
                      (intrinsics:def env (make-letrec-env acc-defns module-name env))
                      (intrinsics:def value (eval (nth 2 expanded) env))
                      (intrinsics:def name (nth 1 expanded))
                      (cons (pair (global-name module-name name) value)
                        (cons (pair name value) env)))
                    macros)
                (panic (list 'todo expand-decls expanded))))))))))
  (loop decls nil nil env macros))

; Creates a macro as a single-argument function, which takes the form it expands and returns the
; expansion. Returns a pair, (MACRO-NAME MACRO-FUNCTION).
(intrinsics:defn make-macro (macro-form env)
  (intrinsics:def body (cons 'progn (skip 3 macro-form)))
  (intrinsics:defn macro (form)
    (eval body (cons (pair (nth 2 macro-form) form) env)))
  (pair (nth 1 macro-form) macro))
