(module macro-expander/expand
  [expand-decls])

(import macro-expander/interpreter
  [eval make-letrec-env])
(import macro-expander/util
  [global-name])

; Returns whether the value is directly macro-expandable with any of the given macros.
(intrinsics:defn expandable? (value macros)
  (intrinsics:def s (as-shl value))
  (if s
    (some? (lookup s macros))
    false))

; Macro-expands an arbitrary value, returning the list of expanded values. Will panic if a defmacro
; is encountered and top-level is not true.
(intrinsics:defn expand-value (value macros top-level)
  (if (and (shl? 'intrinsics:defmacro value) (not top-level))
    (panic ["defmacros must appear at the top level of a module" value])
    (if (shl? 'quote value)
      (list value)
      (if (expandable? value macros)
        (flat-map \(expand-value $ macros top-level)
          ((assoc (car value) macros) (cdr value)))
        (if (cons? value)
          (list (flat-map \(expand-value $ macros false) value))
          (if (vector? value)
            (list (list->vector (flat-map \(expand-value $ macros false) (vector->list value))))
            (list value)))))))

; Converts a defmethod to a defn.
(intrinsics:defn defmethod->defn (form)
  (intrinsics:def name (string->symbol (string-append
    (symbol->string (car (cdr form)))
    (string-append
      "#"
      (symbol->string (car (cdr (cdr form))))))))
  (cons 'intrinsics:defn (cons name (cdr (cdr (cdr form))))))

; Expands the decls at the top level of a module, evaluating defmacros and decls. Returns a list
; (EXPANDED-DECLS ENV MACROS).
;
; TODO: Correctness here is non-obvious; this should probably be rewritten using loop macros and
; an appropriate state or writer monad.
(intrinsics:defn expand-decls (module-name decls env macros)
  ; This loop lets us accumulate defns.
  (intrinsics:defn loop (forms acc-expanded acc-defns env macros)
    (if (nil? forms)
      (list (reverse acc-expanded) (make-letrec-env acc-defns module-name env) macros)
      (progn
        (intrinsics:def form (car forms))
        (intrinsics:def forms (cdr forms))
        (progn
          (intrinsics:defn add-values (values acc-expanded acc-defns env macros)
            (if (nil? values)
              (loop forms acc-expanded acc-defns env macros)
              (progn
                (intrinsics:def form (car values))
                (intrinsics:def values (cdr values))
                (if (shl? 'intrinsics:defmacro form)
                  (progn
                    (intrinsics:def env (make-letrec-env acc-defns module-name env))
                    (add-values values acc-expanded nil env (cons (make-macro form env) macros)))
                  (if (shl? 'intrinsics:defmethod form)
                    (progn
                      (intrinsics:def defnish (defmethod->defn form))
                      (add-values values (cons form acc-expanded) (cons defnish acc-defns) env macros))
                    (if (shl? 'intrinsics:defn form)
                      (add-values values (cons form acc-expanded) (cons form acc-defns) env macros)
                      (if (shl? 'intrinsics:def form)
                        (progn
                          (intrinsics:def env (make-letrec-env acc-defns module-name env))
                          (intrinsics:def value (eval (nth 2 form) env))
                          (intrinsics:def name (nth 1 form))
                          (intrinsics:def env (cons (pair (global-name module-name name) value)
                            (cons (pair name value) env)))
                          (add-values values (cons form acc-expanded) nil env macros))
                        (panic (list 'todo expand-decls form)))))))))
          (add-values (expand-value form macros true) acc-expanded acc-defns env macros)))))
  (loop decls nil nil env macros))

; Creates a macro as a single-argument function, which takes the form it expands and returns the
; expansion. Returns a pair, (MACRO-NAME MACRO-FUNCTION).
(intrinsics:defn make-macro (macro-form env)
  (intrinsics:def body (cons 'progn (skip 3 macro-form)))
  (intrinsics:defn macro (form)
    (eval body (cons (pair (nth 2 macro-form) form) env)))
  (pair (nth 1 macro-form) macro))
