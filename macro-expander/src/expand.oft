(module macro-expander/expand
  [expand-decls])

(import macro-expander/interpreter
  [eval make-letrec-env])

; Returns whether the value is directly macro-expandable with any of the given macros.
(intrinsics:defn expandable? (value macros)
  (intrinsics:def s (as-shl value))
  (if s
    (some? (lookup s macros))
    false))

; Macro-expands an arbitrary value, returning the expanded value. Will panic if a defmacro is
; encountered.
(intrinsics:defn expand-value (value env macros)
  (if (shl? 'intrinsics:defmacro value)
    (panic "defmacros must appear at the top level of a module")
    (if (shl? 'quote value)
      value
      (if (expandable? value macros)
        (panic '(todo | expand-value))
        (if (cons? value)
          (map \(expand-value $ env macros) value)
          (if (vector? value)
            (list->vector (map \(expand-value $ env macros) (vector->list value)))
            value))))))

; Expands the decls at the top level of a module, expanding progns and evaluating defmacros and
; decls. Returns a list (EXPANDED-DECLS ENV MACROS).
(intrinsics:defn expand-decls (decls env macros)
  ; This loop lets us accumulate defns.
  (intrinsics:defn loop (decls acc-expanded acc-defns env macros)
    (if (nil? decls)
      (list (reverse acc-expanded) (make-letrec-env acc-defns env) macros)
      (progn
        (intrinsics:def value (car decls))
        (intrinsics:def decls (cdr decls))
        (if (shl? 'intrinsics:defmacro value)
          (panic ['todo 'defmacro value])
          (progn
            (intrinsics:def expanded (expand-value value env macros))
            (if (shl? 'progn expanded)
              (loop (append (cdr expanded) decls) acc-expanded acc-defns env macros)
              (if (shl? 'intrinsics:defn expanded)
                (loop decls (cons expanded acc-expanded) (cons expanded acc-defns) env macros)
                (if (shl? 'intrinsics:def expanded)
                  (loop decls (cons expanded acc-expanded) nil
                    (progn
                      (intrinsics:def env (make-letrec-env acc-expanded env))
                      (intrinsics:def value (eval (nth 2 expanded) env))
                      (cons (pair (nth 1 expanded) value) env))
                    macros)
                  (panic (list 'todo expand-decls expanded))))))))))
  (loop decls nil nil env macros))
